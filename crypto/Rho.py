# #coding:utf-8
# import gmpy2

# N = 0xD11B49BF43234D6595219AB7C21730DE0A13A7A01E63831A4D4F8DC5A7E68FCA0E9768EF0DABCAD036E08E17E4B27C1151DF364556D8F93D19565D9F40F095A49C6185F2630671EB5EC1EAA514BEC32D93A0F0459B52F1E34D4B9113413403F66619262EF1D3CBB025648C997CD1438DE21CFE4BEA0C6E00C72FFDE587929CB3

# e = 0x10001

# c = 0x4333AF6B43F36028D8D9650EC3EED3238541EE5C15E626C58C9EC33674A6D08D5B1F2580A1A0B07E9D853536CD994E197889D122701A62BB2A9E79559F3D5281014535F6C54F83CA8D9700EEB67D99AF318D20A5150AD46D622A6A12DE0A758EE7DF75F5D10F2FE2585F2348537787063321FFDAC91BB3C3D1D88CBD04A824ED


# def f(x):
#     return (x*x+1)%N

# x1 = f(1000001)
# x2 = f(x1)
# while (x1<N):
#     num = gmpy2.gcd(abs(x2-x1),N)
#     if num != 1:
#         print num
#         break
#     else:
#         x1 = x2
#         # print x1
#         x2 = f(x1)

# print "ok"

import gmpy2
from Crypto.Util.number import *
def gcd(a,b):
    if a%b == 0:
        return b
    return gcd(b,a%b)
def fa(x,n):
    return (x*x+1)%n
def rho(n):
    x0 = 1000001
    x1 = 1000001
    count = 0
    while True:
        x0 = fa(x0,n)
        x1 = fa(fa(x1,n),n)
        '''if abs(x1-x0)%920724637201 == 0:
            return count'''
        count+=1
        p = gcd(abs(x0-x1),n)
        if p!=1:
            q = n//p
            print(count)
            return p,q
def rsa(p,q,c,e):
    d = gmpy2.invert(e,(p-1)*(q-1))
    print("p = "+str(p))
    print("q = "+str(q))
    m = pow(c,d,p*q)
    print("m = "+str(m))
    return (long_to_bytes(m)) 

n1 = 0x8614C70089AADE50E5A14DE1FB8FCF0880046E9494EEAD3BF600EBE451E335B4C9E21DE984912BCA15914711A9C359056A2AD0543035E971A2FAA387EA53AAD48A7016735E2BB60716626CAD6CF4F9CC41A59CF31EF07473A1DE08A018CAB7C6B95BF7AC9F501BD42FCC4C7CD834B6A7723B6ABCC9A98146A750A9222CCE2CC7
e1 = 0x10001
c1 = 0x4B6A6A6CE0CD9D8E0DF4FBD2A23AF3FB45FA587406A3E052231519C4B6B0B606D64DC531A29C0A7510928D4487E7BC3D45CDBADB595AE7D53FBDEE70371DEBCB9A938B94DC0F266326A9DF6191E04F82A9CDC067D366926B58A9092F55DB22F8D4BCD9777A99F14ED95083D091DA69F80F448EFF48A21F998BBDC97DAEA135C1

p,q=rho(n1)
print rsa(p,q,c1,e1)